#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ JSON format ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
"""
import csv
import json
import re

def fix_json_string(json_str):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç JSON string ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
    if not json_str or json_str.strip() == '':
        return '{"polo":0,"jacket":0,"belt":0,"tung_ting":0,"tie_clip":0}'
    
    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    fixed = json_str.strip()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° { ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î
    if not fixed.startswith('{'):
        fixed = '{' + fixed
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° } ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î  
    if not fixed.endswith('}'):
        fixed = fixed + '}'
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç quote ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
    fixed = fixed.replace('""', '"')
    
    # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ return default
    try:
        parsed = json.loads(fixed)
        return json.dumps(parsed, ensure_ascii=False)
    except:
        # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ default
        return '{"polo":0,"jacket":0,"belt":0,"tung_ting":0,"tie_clip":0}'

def fix_sizes_string(sizes_str):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç sizes string ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
    if not sizes_str or sizes_str.strip() == '':
        return '{"polo":[],"jacket":[]}'
    
    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    fixed = sizes_str.strip()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° { ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î
    if not fixed.startswith('{'):
        fixed = '{' + fixed
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° } ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î
    if not fixed.endswith('}'):
        fixed = fixed + '}'
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç quote ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
    fixed = fixed.replace('""', '"')
    
    # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ return default
    try:
        parsed = json.loads(fixed)
        return json.dumps(parsed, ensure_ascii=False)
    except:
        # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ default
        return '{"polo":[],"jacket":[]}'

def main():
    input_file = 'public/backendData.csv'
    output_file = 'public/backendData_fixed.csv'
    
    try:
        with open(input_file, 'r', encoding='utf-8') as infile:
            reader = csv.reader(infile)
            rows = list(reader)
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
        for i, row in enumerate(rows):
            if i == 0:  # header row
                continue
            
            if len(row) >= 18:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 16 ‡∏Ñ‡∏∑‡∏≠ sizes (0-indexed)
                if len(row) > 16:
                    row[16] = fix_sizes_string(row[16])
                
                # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 17 ‡∏Ñ‡∏∑‡∏≠ items (0-indexed)  
                if len(row) > 17:
                    row[17] = fix_json_string(row[17])
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        with open(output_file, 'w', encoding='utf-8', newline='') as outfile:
            writer = csv.writer(outfile)
            writer.writerows(rows)
        
        print(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {output_file}")
        print("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        for i, row in enumerate(rows[1:6]):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
            if len(row) > 17:
                print(f"‡πÅ‡∏ñ‡∏ß {i+2}:")
                print(f"  Sizes: {row[16]}")
                print(f"  Items: {row[17]}")
                print()
        
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {input_file}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    main()
